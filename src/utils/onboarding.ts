import { createUserSurveyAPI, getUserSurveyAPI } from '@/app/utils/apiall';
import AsyncStorage from '@react-native-async-storage/async-storage';

const ONBOARDING_COMPLETED_KEY = 'onboarding_completed';

// Interface cho d·ªØ li·ªáu survey
export interface SurveyData {
    userId: number;
    categoryId: number;
    discoverSource: string;
    selfAssessment: string;
    skillFocus: string;
    trainingGoal: string;
    allowReminder: boolean;
}

// L∆∞u d·ªØ li·ªáu survey l√™n server v√† ƒë√°nh d·∫•u onboarding ho√†n th√†nh
export const saveOnboardingSurvey = async (surveyData: SurveyData): Promise<boolean> => {
    try {
        console.log('üìù Saving onboarding survey:', surveyData);
        console.log('üìù Survey data type check:', {
            userId: typeof surveyData.userId,
            categoryId: typeof surveyData.categoryId,
            discoverSource: typeof surveyData.discoverSource,
            selfAssessment: typeof surveyData.selfAssessment,
            skillFocus: typeof surveyData.skillFocus,
            trainingGoal: typeof surveyData.trainingGoal,
            allowReminder: typeof surveyData.allowReminder,
        });

        // G·ªçi API l∆∞u survey
        console.log('üöÄ Calling createUserSurveyAPI...');
        const response = await createUserSurveyAPI(surveyData);

        console.log('üìä API Response:', response);
        console.log('üìä Response type:', typeof response);
        console.log('üìä Response keys:', Object.keys(response || {}));

        // V√¨ interceptor tr·∫£ v·ªÅ response.data, ch√∫ng ta c·∫ßn ki·ªÉm tra kh√°c
        if (response && (response.id || response.user || response.category)) {
            // L∆∞u tr·∫°ng th√°i local
            await AsyncStorage.setItem(ONBOARDING_COMPLETED_KEY, 'true');
            console.log('‚úÖ Onboarding survey saved successfully');
            return true;
        } else {
            console.error('‚ùå Failed to save survey - unexpected response format:', response);
            return false;
        }
    } catch (error: any) {
        console.error('‚ùå Error saving onboarding survey:', error);
        console.error('‚ùå Error response:', error?.response?.data);
        console.error('‚ùå Error status:', error?.response?.status);

        // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau
        if (error?.response?.status === 400) {
            console.error('‚ùå Bad request - invalid survey data');
            console.error('‚ùå Server error details:', error?.response?.data);
        } else if (error?.response?.status === 500) {
            console.error('‚ùå Server error when saving survey');
            console.error('‚ùå Server error details:', error?.response?.data);
        } else {
            console.error('‚ùå Unknown error when saving survey');
        }

        return false;
    }
};

// Ki·ªÉm tra xem user ƒë√£ ho√†n th√†nh onboarding ch∆∞a (qua API)
export const getOnboardingCompleted = async (): Promise<boolean> => {
    try {
        // L·∫•y userId t·ª´ AsyncStorage
        const userId = await AsyncStorage.getItem('accountId');
        if (!userId) {
            console.log('‚ùå No userId found');
            return false;
        }

        // Ki·ªÉm tra qua API
        const response = await getUserSurveyAPI(parseInt(userId));

        console.log('üìä Survey check response:', response);
        console.log('üìä Response type:', typeof response);

        if (response) {
            // Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu survey kh√¥ng
            const hasSurvey = Array.isArray(response) ? response.length > 0 : (response && Object.keys(response).length > 0);
            console.log('üìä Survey exists check:', hasSurvey);

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i local ƒë·ªÉ ƒë·ªìng b·ªô
            await AsyncStorage.setItem(ONBOARDING_COMPLETED_KEY, hasSurvey ? 'true' : 'false');

            return hasSurvey;
        } else {
            // Fallback v·ªÅ ki·ªÉm tra local n·∫øu API l·ªói
            console.log('‚ö†Ô∏è API check failed, falling back to local storage');
            const completed = await AsyncStorage.getItem(ONBOARDING_COMPLETED_KEY);
            return completed === 'true';
        }
    } catch (error: any) {
        console.error('‚ùå Error checking onboarding status:', error);

        // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau
        if (error?.response?.status === 404) {
            // User ch∆∞a c√≥ survey (404 = Not Found)
            console.log('üìä User has no survey (404)');
            await AsyncStorage.setItem(ONBOARDING_COMPLETED_KEY, 'false');
            return false;
        } else if (error?.response?.status === 500) {
            // Server error, fallback v·ªÅ local storage
            console.log('‚ö†Ô∏è Server error (500), falling back to local storage');
        } else {
            // C√°c l·ªói kh√°c, fallback v·ªÅ local storage
            console.log('‚ö†Ô∏è API error, falling back to local storage');
        }

        // Fallback v·ªÅ ki·ªÉm tra local n·∫øu c√≥ l·ªói
        try {
            const completed = await AsyncStorage.getItem(ONBOARDING_COMPLETED_KEY);
            return completed === 'true';
        } catch (localError) {
            console.error('‚ùå Error checking local storage:', localError);
            return false;
        }
    }
};

// ƒê√°nh d·∫•u onboarding ho√†n th√†nh (ch·ªâ local, d√πng khi kh√¥ng c√≥ API)
export const setOnboardingCompleted = async (): Promise<void> => {
    try {
        await AsyncStorage.setItem(ONBOARDING_COMPLETED_KEY, 'true');
        console.log('‚úÖ Onboarding completed status saved locally');
    } catch (error) {
        console.error('‚ùå Error saving onboarding status:', error);
    }
};

// X√≥a tr·∫°ng th√°i onboarding (d√πng cho user m·ªõi)
export const clearOnboardingStatus = async (): Promise<void> => {
    try {
        await AsyncStorage.removeItem(ONBOARDING_COMPLETED_KEY);
        console.log('‚úÖ Onboarding status cleared');
    } catch (error) {
        console.error('‚ùå Error clearing onboarding status:', error);
    }
};
