import { router } from "expo-router";

import { useCurrentApp } from "@/context/app.context";
import { useEffect, useState } from "react";

import * as Font from "expo-font";
import * as SplashScreen from "expo-splash-screen";

import AsyncStorage from "@react-native-async-storage/async-storage";
import { checkOnboardingStatusWithAccountsAPI, getUserSurveyAPI } from "./utils/apiall";
import { APP_FONT } from "./utils/constant";

// Keep the splash screen visible while we fetch resources
SplashScreen.preventAutoHideAsync();
const RootPage = () => {
  const { setAppState } = useCurrentApp();
  const [state, setState] = useState<any>();

  const [loaded, error] = Font.useFonts({
    [APP_FONT]: require("@/assets/font/OpenSans-Regular.ttf"),
  });

  useEffect(() => {
    async function prepare() {
      try {
        // L·∫•y t·∫•t c·∫£ survey tr∆∞·ªõc khi ki·ªÉm tra ƒëƒÉng nh·∫≠p
        console.log('üîç Fetching all surveys...');
        try {
          const allSurveys = await getUserSurveyAPI();
          await AsyncStorage.setItem('allSurveys', JSON.stringify(allSurveys));
          console.log('‚úÖ All surveys cached:', allSurveys);
        } catch (surveyError) {
          console.log('‚ö†Ô∏è Could not fetch surveys, will check later:', surveyError);
        }

        const access_token = await AsyncStorage.getItem("access_token");
        if (!access_token) {
          // Kh√¥ng c√≥ token -> ch∆∞a ƒëƒÉng nh·∫≠p
          router.replace("/(auth)/welcome");
          await SplashScreen.hideAsync();
          return;
        } else {
          // C√≥ token -> ƒë√£ ƒëƒÉng nh·∫≠p, ki·ªÉm tra onboarding status
          console.log('üîç Checking onboarding status on app start...');
          const username = await AsyncStorage.getItem('username');
          
          if (username) {
            try {
              // S·ª≠ d·ª•ng function m·ªõi ƒë·ªÉ ki·ªÉm tra onboarding status v·ªõi accounts v√† surveys
              const hasCompletedOnboarding = await checkOnboardingStatusWithAccountsAPI();
              
              if (hasCompletedOnboarding) {
                // ƒê√£ ho√†n th√†nh onboarding -> chuy·ªÉn ƒë·∫øn home
                console.log('‚úÖ User has completed onboarding (found in both accounts and surveys), going to home');
                router.replace("/(tabs)");
              } else {
                // Ch∆∞a ho√†n th√†nh onboarding -> ki·ªÉm tra xem ƒë√¢y c√≥ ph·∫£i l√† app restart kh√¥ng
                const isAppRestart = await AsyncStorage.getItem('app_restart_flag');
                
                if (isAppRestart === 'true') {
                  // ƒê√¢y l√† app restart -> x√≥a session v√† v·ªÅ welcome
                  console.log('üîÑ App restart detected - user not completed onboarding, clearing session and going to welcome');
                  await AsyncStorage.removeItem("access_token");
                  await AsyncStorage.removeItem("username");
                  await AsyncStorage.removeItem("userId");
                  await AsyncStorage.removeItem("accountId");
                  await AsyncStorage.removeItem('app_restart_flag');
                  router.replace("/(auth)/welcome");
                } else {
                  // ƒê√¢y l√† l·∫ßn ƒë·∫ßu ti√™n -> chuy·ªÉn ƒë·∫øn onboarding
                  console.log('üì± First time login - user not completed onboarding, going to onboarding');
                  router.replace("/(onboarding)/intro");
                }
              }
            } catch (error) {
              console.log('‚ö†Ô∏è Error checking onboarding status:', error);
              // Khi c√≥ l·ªói, c≈©ng ki·ªÉm tra app restart
              const isAppRestart = await AsyncStorage.getItem('app_restart_flag');
              
              if (isAppRestart === 'true') {
                console.log('üîÑ App restart with error - clearing session and going to welcome');
                await AsyncStorage.removeItem("access_token");
                await AsyncStorage.removeItem("username");
                await AsyncStorage.removeItem("userId");
                await AsyncStorage.removeItem("accountId");
                await AsyncStorage.removeItem('app_restart_flag');
                router.replace("/(auth)/welcome");
              } else {
                console.log('üì± First time login with error - going to onboarding');
                router.replace("/(onboarding)/intro");
              }
            }
          } else {
            // Kh√¥ng c√≥ username -> ki·ªÉm tra app restart
            const isAppRestart = await AsyncStorage.getItem('app_restart_flag');
            
            if (isAppRestart === 'true') {
              console.log('üîÑ App restart - no username, clearing session and going to welcome');
              await AsyncStorage.removeItem("access_token");
              await AsyncStorage.removeItem("username");
              await AsyncStorage.removeItem("userId");
              await AsyncStorage.removeItem("accountId");
              await AsyncStorage.removeItem('app_restart_flag');
              router.replace("/(auth)/welcome");
            } else {
              console.log('üì± First time login - no username, going to onboarding');
              router.replace("/(onboarding)/intro");
            }
          }
          
          await SplashScreen.hideAsync();
          return;
        }
      } catch (e) {
        console.warn('Error in app initialization:', e);
        // N·∫øu c√≥ l·ªói, fallback v·ªÅ welcome screen
        router.replace("/(auth)/welcome");
        await SplashScreen.hideAsync();
      }
    }

    prepare();
  }, []);

  // if(true){
  //   return(
  //     <Redirect href={"/(tabs)"} />
  //   )
  // }
};

export default RootPage;
