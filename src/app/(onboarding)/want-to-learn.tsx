import { getAllCategoriesAPI } from "@/app/utils/apiall";
import QuestionLayout, {
  OptionItem,
} from "@/components/onboarding/questionLayout";
import { useOnboarding } from "@/context/onboarding.context";
import { router } from "expo-router";
import { useEffect, useState } from "react";
import { ActivityIndicator, Text, View } from "react-native";

// Fallback options n·∫øu API kh√¥ng ho·∫°t ƒë·ªông
const fallbackOptions: OptionItem[] = [
  { id: "pronounce", label: "Luy·ªán ph√°t √¢m" },
  { id: "pattern", label: "Luy·ªán n√≥i theo m·∫´u" },
  { id: "reflex", label: "Luy·ªán ph·∫£n x·∫°" },
  { id: "intonation", label: "Luy·ªán ng·ªØ ƒëi·ªáu" },
  { id: "daily", label: "H·ªôi tho·∫°i ƒë·ªùi s·ªëng" },
  { id: "topic", label: "T·ª± do luy·ªán n√≥i theo ch·ªß ƒë·ªÅ" },
  { id: "other", label: "Ti√™u ƒë·ªÅ kh√°c...", type: "text" },
];

const WantToLearnScreen = () => {
  const { updateSurveyData } = useOnboarding();
  const [options, setOptions] = useState<OptionItem[]>(fallbackOptions);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Fetch categories t·ª´ API
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        setLoading(true);
        setError(null);
        console.log('üìö Fetching categories from API...');
        
        const response = await getAllCategoriesAPI();
        console.log('üìö Categories API Response:', response);
        
        if (response && Array.isArray(response) && response.length > 0) {
          // Convert API response th√†nh OptionItem format
          const categoryOptions: OptionItem[] = response.map((category: any) => ({
            id: category.id.toString(),
            label: category.name || category.title || 'Unknown Category'
          }));
          
          // Th√™m option "Ti√™u ƒë·ªÅ kh√°c..." v√†o cu·ªëi
          categoryOptions.push({ id: "other", label: "Ti√™u ƒë·ªÅ kh√°c...", type: "text" });
          
          setOptions(categoryOptions);
          console.log('üìö Categories loaded successfully:', categoryOptions);
        } else {
          console.log('‚ö†Ô∏è No categories found, using fallback options');
          setOptions(fallbackOptions);
        }
      } catch (err) {
        console.error('‚ùå Error fetching categories:', err);
        setError('Kh√¥ng th·ªÉ t·∫£i danh m·ª•c h·ªçc t·∫≠p');
        // S·ª≠ d·ª•ng fallback options khi c√≥ l·ªói
        setOptions(fallbackOptions);
      } finally {
        setLoading(false);
      }
    };

    fetchCategories();
  }, []);

  // Hi·ªÉn th·ªã loading n·∫øu ƒëang fetch data
  if (loading) {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#fff' }}>
        <ActivityIndicator size="large" color="#2AA0FF" />
        <Text style={{ marginTop: 16, fontSize: 16, color: '#666' }}>
          ƒêang t·∫£i danh m·ª•c h·ªçc t·∫≠p...
        </Text>
      </View>
    );
  }
  
  return (
    <QuestionLayout
      progress={0.15}
      progressText="15%"
      question="B·∫°n mu·ªën h·ªçc g√¨ nh·ªâ?"
      options={options}
      selectionMode="multiple"
      nextLabel="Ti·∫øp t·ª•c"
      onBack={() => router.back()}
      onNext={(answers) => {
        // L∆∞u skillFocus v√† categoryIds t·ª´ c√°c options ƒë∆∞·ª£c ch·ªçn
        const firstAnswer = answers.length > 0 ? answers[0] : "Luy·ªán ph√°t √¢m";
        const skillFocus = typeof firstAnswer === 'string' ? firstAnswer : firstAnswer.label;
        
        // L·∫•y categoryIds t·ª´ c√°c options ƒë∆∞·ª£c ch·ªçn (lo·∫°i b·ªè "other")
        const categoryIds: number[] = answers
          .filter(answer => typeof answer === 'object' && answer.id !== 'other')
          .map(answer => parseInt((answer as any).id))
          .filter(id => !isNaN(id));
        
        // N·∫øu kh√¥ng c√≥ categoryIds n√†o, s·ª≠ d·ª•ng default
        if (categoryIds.length === 0) {
          categoryIds.push(1); // Default category ID
        }
        
        updateSurveyData({ 
          skillFocus,
          categoryIds 
        });
        
        console.log('üìö Selected categories:', { skillFocus, categoryIds });
        
        router.push({
          pathname: "/(onboarding)/heard-from",
          params: { interests: JSON.stringify(answers) },
        });
      }}
    />
  );
};
export default WantToLearnScreen;
