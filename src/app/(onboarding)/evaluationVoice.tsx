import ShareButton from "@/components/button/share.button";
import ProgressBar from "@/components/onboarding/progressBar";
import { useOnboarding } from "@/context/onboarding.context";
import { saveOnboardingSurvey } from "@/utils/onboarding";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { router } from "expo-router";
import { useState } from "react";
import { StyleSheet, Text, View } from "react-native";
import Toast from "react-native-root-toast";
import { SafeAreaView } from "react-native-safe-area-context";

const rows = [
  { id: "speed", label: "T·ªëc ƒë·ªô", value: 0.35 },
  { id: "intonation", label: "Ng·ªØ ƒëi·ªáu", value: 0.7 },
  { id: "energy", label: "NƒÉng l∆∞·ª£ng", value: 0.55 },
  { id: "pronunciation", label: "Ph√°t √¢m", value: 0.2 },
];

const EvaluationScreen = ({ navigation }: any) => {
  const { surveyData } = useOnboarding();
  const [isSaving, setIsSaving] = useState(false);

  const handleComplete = async () => {
    try {
      setIsSaving(true);
      console.log('üíæ Starting to save onboarding survey...');
      console.log('üíæ Survey data:', surveyData);
      console.log('üíæ Survey data keys:', Object.keys(surveyData));
      console.log('üíæ Survey data details:', JSON.stringify(surveyData, null, 2));

      // L·∫•y userId t·ª´ AsyncStorage (∆∞u ti√™n userId t·ª´ login)
      const userId = await AsyncStorage.getItem('userId') || await AsyncStorage.getItem('accountId');
      console.log('üíæ UserId from storage:', userId);
      console.log('üíæ UserId type:', typeof userId);
      
      if (!userId) {
        console.error('‚ùå No userId found');
        console.error('‚ùå Available AsyncStorage keys:', await AsyncStorage.getAllKeys());
        Toast.show("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng!", {
          position: Toast.positions.TOP,
        });
        return;
      }

      // Chu·∫©n b·ªã d·ªØ li·ªáu survey theo format API v·ªõi text values thay v√¨ IDs
      const surveyPayload = {
        userId: parseInt(userId),
        categoryIds: surveyData.categoryIds || [1], // Default category n·∫øu kh√¥ng c√≥
        discoverSource: surveyData.discoverSource || "Facebook", // Default value
        selfAssessment: surveyData.selfAssessment || "Trung b√¨nh", // Default value
        skillFocus: surveyData.skillFocus || "Nghe v√† n√≥i", // Default value
        trainingGoal: surveyData.trainingGoal || "2 ng√†y / tu·∫ßn", // Default value
        allowReminder: surveyData.allowReminder !== undefined ? surveyData.allowReminder : true, // Default true
      };

      console.log('üíæ Prepared survey payload:', surveyPayload);
      console.log('üíæ Payload validation:', {
        userIdValid: !isNaN(surveyPayload.userId) && surveyPayload.userId > 0,
        categoryIdsValid: Array.isArray(surveyPayload.categoryIds) && surveyPayload.categoryIds.length > 0,
        discoverSourceValid: typeof surveyPayload.discoverSource === 'string' && surveyPayload.discoverSource.length > 0,
        selfAssessmentValid: typeof surveyPayload.selfAssessment === 'string' && surveyPayload.selfAssessment.length > 0,
        skillFocusValid: typeof surveyPayload.skillFocus === 'string' && surveyPayload.skillFocus.length > 0,
        trainingGoalValid: typeof surveyPayload.trainingGoal === 'string' && surveyPayload.trainingGoal.length > 0,
        allowReminderValid: typeof surveyPayload.allowReminder === 'boolean'
      });

      // G·ªçi API l∆∞u survey
      const success = await saveOnboardingSurvey(surveyPayload);
      
      if (success) {
        console.log('‚úÖ Onboarding survey saved successfully');
        Toast.show("Ho√†n th√†nh onboarding th√†nh c√¥ng!", {
          position: Toast.positions.TOP,
        });
        
        // Chuy·ªÉn ƒë·∫øn trang ch√≠nh
        router.replace("/(tabs)");
      } else {
        console.error('‚ùå Failed to save onboarding survey');
        Toast.show("Kh√¥ng th·ªÉ l∆∞u th√¥ng tin onboarding. Vui l√≤ng th·ª≠ l·∫°i!", {
          position: Toast.positions.TOP,
        });
      }
    } catch (error) {
      console.error('‚ùå Error saving onboarding survey:', error);
      Toast.show("C√≥ l·ªói x·∫£y ra khi l∆∞u th√¥ng tin. Vui l√≤ng th·ª≠ l·∫°i!", {
        position: Toast.positions.TOP,
      });
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <SafeAreaView style={{ flex: 1 }}>
      <View style={styles.safe}>
        <Text style={styles.title}>ƒê√ÅNH GI√Å</Text>

        <View style={{ gap: 18, marginTop: 16 }}>
          {rows.map((r) => (
            <View key={r.id}>
              <View style={styles.rowLabel}>
                <Text style={styles.metricLabel}>{r.label}</Text>
              </View>
              <View style={{ marginBottom: 36 }}>
                <ProgressBar
                  progress={r.value}
                  height={36}
                  trackColor="#EEF1F4"
                  tintColor="#58BDF8"
                  rounded
                  showLabel={true}
                />
              </View>
            </View>
          ))}
        </View>

        <View style={styles.footer}>
          <ShareButton
            title="L√†m l·∫°i n√†o!"
            onPress={() => {
              router.push("/(onboarding)/voiceCheck");
            }}
            buttonStyle={{
              height: 44,
              width: 135,
              backgroundColor: "white",
              borderWidth: 1,
              borderColor: "black",
            }}
            textStyle={{ color: "black", fontSize: 14 }}
          />
          <View style={{ flex: 1 }} />
          <ShareButton
            title={isSaving ? "ƒêang l∆∞u..." : "Ho√†n th√†nh"}
            onPress={handleComplete}
            buttonStyle={[styles.cta, isSaving && { opacity: 0.7 }]}
            textStyle={{ color: "black", fontSize: 16  }}
            disabled={isSaving}
          />
        </View>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  safe: {
    flex: 1,
    backgroundColor: "#fff",
    paddingTop: 8,
    paddingHorizontal: 16,
  },
  title: {
    fontSize: 46,
    fontWeight: "900",
    color: "#0f3d2e",
    textAlign: "center",
    marginBottom: 60,
    marginTop: 16,
  },
  rowLabel: { flexDirection: "row", alignItems: "center", marginBottom: 10 },
  metricLabel: { color: "#273B47", fontWeight: "700", fontSize: 20 },
  metricPct: { marginLeft: 8, color: "#7A8B96" },
  footer: {
    flexDirection: "row",
    alignItems: "center",
    marginTop: "auto",
    paddingVertical: 32,
    paddingHorizontal: 16,
  },
  cta: {
    height: 44,
    width: 140,
  },
});
export default EvaluationScreen;
